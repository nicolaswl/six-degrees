{"version":3,"sources":["components/Entry.js","App.js","serviceWorker.js","index.js"],"names":["Entry","props","useState","id","setId","img","setImg","useEffect","a","res","data","label","fetch","name","json","fetchInfo","Col","Card","Img","variant","src","Body","Title","Button","href","App","state","connection","handleSubmit","bind","event","preventDefault","stopPropagation","actor1","document","getElementById","value","actor2","response","this","setState","Row","map","entry","Container","Form","onSubmit","Group","Label","Control","placeholder","required","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUAyCeA,EAtCD,SAACC,GAAW,IAAD,EAEDC,qBAFC,mBAEdC,EAFc,KAEVC,EAFU,OAGCF,qBAHD,mBAGdG,EAHc,KAGTC,EAHS,KAyBrB,OAnBAC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,yDACQC,EAAM,KACNC,EAAO,KAEQ,SAAfT,EAAMU,MAJd,iCAKoBC,MAAM,2BAAD,OAA4BX,EAAMY,OAL3D,cAKQJ,EALR,gBAMqBA,EAAIK,OANzB,OAMQJ,EANR,gDAQoBE,MAAM,2BAAD,OAA4BX,EAAMY,OAR3D,eAQQJ,EARR,iBASqBA,EAAIK,OATzB,QASQJ,EATR,eAYIN,EAAMM,EAAKP,IACXG,EAAOI,EAAKL,KAbhB,6CADY,uBAAC,WAAD,wBAgBZU,KACD,IAGC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,SAASC,IAAKf,IAChC,kBAACY,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,KAAarB,EAAMY,MACnB,kBAACU,EAAA,EAAD,CAAQJ,QAAQ,OAAOK,KAAMrB,GAA7B,qBC8BLsB,E,kDA3Db,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,WAAY,MAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,kGASAC,G,oFACjBA,EAAMC,iBACND,EAAME,kBAEAC,EAASC,SAASC,eAAe,UAAUC,MAC3CC,EAASH,SAASC,eAAe,UAAUC,M,SAC1BxB,MAAM,8BAAD,OAA+BqB,EAA/B,YAAyCI,I,cAA/DC,E,gBACaA,EAASxB,O,OAAtBJ,E,OACN6B,KAAKC,SAAS,CAAEb,WAAYjB,I,uIAI5B,IAAMiB,EAAaY,KAAKb,MAAMC,WAC9B,OAAIA,EAEA,kBAACc,EAAA,EAAD,KACGd,EAAWe,KAAI,SAAAC,GAAK,OACnB,kBAAC,EAAD,CAAO9B,KAAM8B,EAAM9B,KAAMF,MAAOgC,EAAMhC,YAM1C,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,SAAUP,KAAKX,cACnB,kBAACa,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,KACE,kBAAC6B,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAc9C,GAAG,SAAS+C,YAAY,cAAcC,UAAQ,OAKlE,kBAACV,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,KACE,kBAAC6B,EAAA,EAAKE,MAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,gBACA,kBAACH,EAAA,EAAKI,QAAN,CAAc9C,GAAG,SAAS+C,YAAY,gBAAgBC,UAAQ,OAIpE,kBAAC5B,EAAA,EAAD,CAAQJ,QAAQ,OAAOiC,KAAK,UAA5B,a,GApDMC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDwHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1604781c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Card, Button, Row, Col } from 'react-bootstrap';\n\nconst Entry = (props) => {\n\n    const [id, setId] = useState();\n    const [img, setImg] = useState();\n\n\n    useEffect(() => {\n        async function fetchInfo() {\n            let res = null;\n            let data = null;\n\n            if (props.label == \"Actor\") {\n                res = await fetch(`http://localhost:9000/a/${props.name}`);\n                data = await res.json();\n            } else {\n                res = await fetch(`http://localhost:9000/m/${props.name}`);\n                data = await res.json();\n            }\n\n            setId(data.id)\n            setImg(data.img);\n        }\n        fetchInfo();\n    }, []);\n\n    return (\n        <Col>\n            <Card>\n                <Card.Img variant=\"bottom\" src={img} />\n                <Card.Body>\n                    <Card.Title>{props.name}</Card.Title>\n                    <Button variant=\"link\" href={id}>Visit on IMDB</Button>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n}\n\nexport default Entry\n","import React, { Component } from 'react';\nimport { Form, Row, Container, Col, Button, CardColumns} from 'react-bootstrap';\nimport Entry from './components/Entry';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connection: null\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const actor1 = document.getElementById('actor1').value;\n    const actor2 = document.getElementById('actor2').value;\n    const response = await fetch(`http://localhost:9000/link/${actor1}/${actor2}`);\n    const data = await response.json();\n    this.setState({ connection: data });\n  }\n\n  render() {\n    const connection = this.state.connection\n    if (connection) {\n      return (\n        <Row>\n          {connection.map(entry => (\n            <Entry name={entry.name} label={entry.label}/>\n          ))}\n        </Row>\n      );\n    } else {\n      return (\n        <Container>\n          <Form onSubmit={this.handleSubmit}>\n            <Row>\n              <Col>\n                <Form.Group>\n                  <Form.Label>Actor 1</Form.Label>\n                  <Form.Control id=\"actor1\" placeholder=\"Kevin Bacon\" required />\n                </Form.Group>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col>\n                <Form.Group>\n                  <Form.Label>Actor 2</Form.Label>\n                  <Form.Control id=\"actor2\" placeholder=\"Harrison Ford\" required />\n                </Form.Group>\n              </Col>\n            </Row>\n            <Button variant=\"dark\" type=\"Submit\">Go!</Button>\n          </Form>\n        </Container>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}